# NOTE: This Dockerfile is generated. Do not edit manually.
FROM almalinux:9
SHELL ["/bin/bash", "-euo", "pipefail", "-c"]

RUN dnf update -y
RUN dnf install -y sudo


ARG USERNAME=blue
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

USER $USERNAME

WORKDIR /home/$USERNAME

ENV HOME=/home/$USERNAME

# Stage: init
# Setup for init
RUN sudo dnf install -y vim curl git make gcc --skip-broken

# File copy for init
COPY .bashrc $HOME/
RUN sudo chown $USERNAME:$USERNAME $HOME/.bashrc

# Stage: python
# Setting Env for python
ENV PATH=$HOME/.local/bin:$PATH

# Setup for python
RUN curl -LsSf https://astral.sh/uv/0.7.9/install.sh | sh && uv python install 3.11 3.13


# Stage: starship
# Preparation for starship
RUN sudo dnf install -y curl --skip-broken

# Setup for starship
RUN curl -sS https://starship.rs/install.sh | sh -s -- -y && mkdir -p $HOME/.config

# File copy for starship
COPY starship.toml $HOME/.config/
RUN sudo chown $USERNAME:$USERNAME $HOME/.config/starship.toml
# Validation for starship
RUN command -v starship --version >/dev/null 2>&1


# Stage: node
# Preparation for node
RUN sudo dnf install -y curl --skip-broken

# Setup for node
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash && \
    export NVM_DIR=$HOME/.nvm && \
    bash -c 'source $NVM_DIR/nvm.sh && nvm install 22'


# Stage: rust
# Setting Env for rust
ENV PATH=$PATH:$HOME/.cargo/bin

# Setup for rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --no-modify-path

# Validation for rust
RUN command -v rustc --version >/dev/null 2>&1
RUN command -v cargo -version >/dev/null 2>&1


# Stage: tools
# Preparation for tools
RUN sudo dnf install -y tar

# Setup for tools
RUN sudo dnf install -y epel-release
RUN sudo dnf update -y
RUN sudo dnf install -y ranger fzf ripgrep ncdu
RUN mkdir -p ~/.local/bin && curl -L 'https://github.com/eza-community/eza/releases/download/v0.21.1/eza_x86_64-unknown-linux-gnu.tar.gz' | tar -xz -C /tmp && mv /tmp/eza ~/.local/bin/ && \
    uv tool install --python 3.11 ipython && \
    curl -LO 'https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl' && \
    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl


# Stage: ssh
# Preparation for ssh
RUN sudo dnf install -y openssh-server

# Setup for ssh
RUN sudo sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sudo sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    sudo sed -i 's/^#*UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config && \
    sudo ssh-keygen -A


# Stage: optional
# Setup for optional
RUN sudo dnf install -y procps iproute


# Stage: go
# Setting Env for go
ENV PATH=$PATH:/usr/local/go/bin

# Preparation for go
RUN sudo dnf install -y curl --skip-broken

# Setup for go
RUN curl -LO https://go.dev/dl/go1.23.9.linux-amd64.tar.gz && \
    sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.23.9.linux-amd64.tar.gz && \
    rm go1.23.9.linux-amd64.tar.gz && \
    echo 'export PATH=$PATH:/usr/local/go/bin' >> $HOME/.bashrc && \
    source $HOME/.bashrc

# Validation for go
RUN command -v go >/dev/null 2>&1


# Stage: pnpm
# Setup for pnpm
RUN curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION=9.15.9 sh -



# SecretsUsedInArgOrEnv: Do not use ARG or ENV instructions for sensitive data
ARG PASSWORD=admin
RUN echo "${USERNAME}:${PASSWORD}" | sudo chpasswd
